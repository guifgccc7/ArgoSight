import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { FileText, Download, Clock, Brain, Loader2, AlertTriangle } from "lucide-react";
import { maritimeAIService } from "@/services/maritimeAIService";
import { liveDataService } from "@/services/liveDataService";
import { alertsService } from "@/services/alertsService";
import { useToast } from "@/components/ui/use-toast";

interface GeneratedReport {
  id: string;
  title: string;
  type: string;
  content: string;
  generatedAt: Date;
  dataRange: string;
  classification: string;
}

const AutoReportGenerator = () => {
  const [reports, setReports] = useState<GeneratedReport[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedReportType, setSelectedReportType] = useState('daily');
  const [autoGenerate, setAutoGenerate] = useState(true);
  const { toast } = useToast();

  const reportTypes = [
    { value: 'daily', label: 'Daily Intelligence Brief', schedule: '24h' },
    { value: 'threat', label: 'Threat Assessment Report', schedule: 'On-demand' },
    { value: 'pattern', label: 'Pattern Analysis Report', schedule: 'Weekly' },
    { value: 'route', label: 'Route Optimization Report', schedule: 'Weekly' },
    { value: 'security', label: 'Security Incident Report', schedule: 'As needed' },
    { value: 'weather', label: 'Weather Impact Analysis', schedule: 'Daily' }
  ];

  const generateReport = async (reportType: string) => {
    setIsGenerating(true);
    try {
      // Collect data for the report - using available methods
      const liveData = liveDataService.getImmediateSimulatedData();
      const vesselData = liveData?.vessels || [];
      const alertData = alertsService.getAlerts().slice(0, 20);
      const weatherData = [];
      
      const reportData = {
        vessels: vesselData.slice(0, 50), // Limit data size for API
        alerts: alertData.slice(0, 20),
        weather: weatherData,
        timeRange: reportType === 'daily' ? '24h' : '7d',
        totalVessels: vesselData.length,
        activeAlerts: alertData.filter(a => a.status === 'new').length,
        reportType
      };

      // Generate AI report
      const response = await maritimeAIService.generateReport(reportData, reportType);
      
      // Create report object
      const newReport: GeneratedReport = {
        id: Date.now().toString(),
        title: `${reportTypes.find(t => t.value === reportType)?.label} - ${new Date().toLocaleDateString()}`,
        type: reportType,
        content: response.analysis,
        generatedAt: new Date(),
        dataRange: reportType === 'daily' ? 'Last 24 hours' : 'Last 7 days',
        classification: 'CONFIDENTIAL'
      };

      setReports(prev => [newReport, ...prev.slice(0, 9)]); // Keep last 10 reports
      
      toast({
        title: "Report Generated",
        description: `${newReport.title} has been generated successfully`,
      });

    } catch (error) {
      console.error('Error generating report:', error);
      toast({
        title: "Report Generation Failed",
        description: "Failed to generate report. Check AI service configuration.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  useEffect(() => {
    // Generate initial daily report
    generateReport('daily');
    
    if (autoGenerate) {
      // Set up automatic report generation
      const interval = setInterval(() => {
        const hour = new Date().getHours();
        
        // Generate daily report at 6 AM
        if (hour === 6) {
          generateReport('daily');
        }
        
        // Generate weekly reports on Monday at 8 AM
        if (new Date().getDay() === 1 && hour === 8) {
          generateReport('pattern');
          generateReport('route');
        }
      }, 60 * 60 * 1000); // Check every hour

      return () => clearInterval(interval);
    }
  }, [autoGenerate]);

  const downloadReport = (report: GeneratedReport) => {
    const element = document.createElement('a');
    const file = new Blob([`
MARITIME INTELLIGENCE REPORT
${report.title}
Generated: ${report.generatedAt.toLocaleString()}
Classification: ${report.classification}
Data Range: ${report.dataRange}

${report.content}

---
Generated by ArgoSight AI Maritime Intelligence Platform
    `], { type: 'text/plain' });
    
    element.href = URL.createObjectURL(file);
    element.download = `${report.title.replace(/[^a-z0-9]/gi, '_')}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const getClassificationColor = (classification: string) => {
    switch (classification) {
      case 'TOP SECRET': return 'text-red-400 border-red-400';
      case 'SECRET': return 'text-orange-400 border-orange-400';
      case 'CONFIDENTIAL': return 'text-yellow-400 border-yellow-400';
      default: return 'text-green-400 border-green-400';
    }
  };

  return (
    <Card className="bg-slate-800 border-slate-700">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-white flex items-center space-x-2">
            <FileText className="h-5 w-5 text-cyan-400" />
            <span>AI Report Generator</span>
            <Badge variant="outline" className="text-cyan-400 border-cyan-400">
              AUTOMATED
            </Badge>
          </CardTitle>
          <div className="flex items-center space-x-2">
            <Select value={selectedReportType} onValueChange={setSelectedReportType}>
              <SelectTrigger className="w-48 bg-slate-700 border-slate-600 text-white">
                <SelectValue placeholder="Select report type" />
              </SelectTrigger>
              <SelectContent className="bg-slate-700 border-slate-600">
                {reportTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value} className="text-white">
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Button
              onClick={() => generateReport(selectedReportType)}
              disabled={isGenerating}
              className="bg-cyan-600 hover:bg-cyan-700"
            >
              {isGenerating ? (
                <Loader2 className="h-4 w-4 animate-spin mr-1" />
              ) : (
                <Brain className="h-4 w-4 mr-1" />
              )}
              Generate
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Report Queue Status */}
        <div className="grid grid-cols-3 gap-4">
          <div className="bg-slate-700 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-cyan-400">{reports.length}</div>
            <div className="text-xs text-slate-400">Generated Reports</div>
          </div>
          <div className="bg-slate-700 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-green-400">
              {autoGenerate ? 'ON' : 'OFF'}
            </div>
            <div className="text-xs text-slate-400">Auto Generation</div>
          </div>
          <div className="bg-slate-700 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-orange-400">
              {reports.filter(r => r.type === 'threat').length}
            </div>
            <div className="text-xs text-slate-400">Threat Reports</div>
          </div>
        </div>

        {/* Generated Reports */}
        <ScrollArea className="h-64">
          <div className="space-y-3">
            {isGenerating && reports.length === 0 && (
              <div className="flex items-center justify-center py-8">
                <div className="flex items-center space-x-2 text-slate-400">
                  <Brain className="h-5 w-5 animate-pulse" />
                  <span>Generating AI intelligence report...</span>
                </div>
              </div>
            )}

            {reports.map((report) => (
              <div
                key={report.id}
                className="bg-slate-700 p-4 rounded-lg space-y-3"
              >
                <div className="flex items-start justify-between">
                  <div>
                    <div className="font-medium text-white">{report.title}</div>
                    <div className="text-sm text-slate-400 flex items-center space-x-2">
                      <Clock className="h-3 w-3" />
                      <span>{report.generatedAt.toLocaleString()}</span>
                      <span>â€¢</span>
                      <span>{report.dataRange}</span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge variant="outline" className={getClassificationColor(report.classification)}>
                      {report.classification}
                    </Badge>
                    <Button
                      onClick={() => downloadReport(report)}
                      variant="outline"
                      size="sm"
                      className="text-cyan-400 border-cyan-600"
                    >
                      <Download className="h-3 w-3" />
                    </Button>
                  </div>
                </div>

                {/* Report Preview */}
                <div className="bg-slate-800 p-3 rounded text-sm text-slate-300 max-h-20 overflow-hidden">
                  {report.content.substring(0, 200)}...
                </div>

                {/* Report Stats */}
                <div className="flex items-center justify-between text-xs text-slate-500">
                  <span>Type: {reportTypes.find(t => t.value === report.type)?.label}</span>
                  <span>Generated by ArgoSight AI</span>
                </div>
              </div>
            ))}

            {!isGenerating && reports.length === 0 && (
              <div className="flex items-center justify-center py-8">
                <div className="text-center text-slate-400">
                  <FileText className="h-12 w-12 mx-auto mb-2 opacity-50" />
                  <p>No reports generated yet</p>
                  <p className="text-sm">Click Generate to create your first AI report</p>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        {/* Generation Schedule */}
        <div className="space-y-2">
          <div className="text-sm text-slate-300 font-medium">Automated Schedule:</div>
          <div className="grid grid-cols-2 gap-2 text-xs">
            {reportTypes.map((type) => (
              <div key={type.value} className="flex justify-between bg-slate-700 p-2 rounded">
                <span className="text-slate-400">{type.label}</span>
                <span className="text-cyan-400">{type.schedule}</span>
              </div>
            ))}
          </div>
        </div>

        {/* AI Status */}
        <div className="flex items-center justify-between text-xs text-slate-400 pt-2 border-t border-slate-700">
          <div className="flex items-center space-x-2">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
            <span>AI Report Engine: Active</span>
          </div>
          <div className="flex items-center space-x-4">
            <span>Next Daily: Tomorrow 06:00</span>
            <span>Next Weekly: Monday 08:00</span>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default AutoReportGenerator;